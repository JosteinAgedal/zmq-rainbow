{
  "name": "hprotocol",
  "version": "0.5.0",
  "description": "Streaming human readable command protocol",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/hprotocol.git"
  },
  "keywords": [
    "simple",
    "easy",
    "parser",
    "generator",
    "protocol",
    "stream",
    "streaming",
    "human",
    "readable",
    "nc"
  ],
  "dependencies": {
    "fifo": "~0.2.0",
    "pump": "~0.1.5"
  },
  "devDependencies": {
    "tap": "~0.4.4"
  },
  "scripts": {
    "test": "tap ./test/*.js"
  },
  "readme": "# hprotocol\n\nStreaming human readable command protocol\n\n\tnpm install hprotocol\n\n[![build status](https://secure.travis-ci.org/mafintosh/hprotocol.png)](http://travis-ci.org/mafintosh/hprotocol)\n\n## What does it do?\n\nhprotocol allows you to easily generate a command protocol that its easy to\nparse both for programs and human beings.\n\nAs an example lets generate a protocol that echoes a value\n\n``` js\nvar hprotocol = require('hprotocol');\nvar net = require('net');\n\nvar protocol = hprotocol()\n\t.use('echo value > value');\n\nnet.createServer(function(socket) {\n\tvar client = protocol();\n\n\t// listen for the echo command\n\tclient.on('echo', function(value, callback) {\n\t\tcallback(null, 'echo: '+value);\n\t});\n\n\t// setup the pipe chain\n\tsocket.pipe(client.stream).pipe(socket);\n\n\t// print the protocol specification for easier usage\n\tsocket.write(client.specification);\n}).listen(9999);\n```\n\nThe `echo value > value` syntax denotes an `echo` command that accepts a value and returns a value.\nOpen a new termainal and try interfacing with the server.\n\n\t$ nc localhost 9999 # create a socket to the server\n\t$ echo test         # send a echo command\n\t$ > test            # this is the reply from the server\n\nSimilary you can interface with the server using node:\n\n``` js\nvar client = protocol(); // using the same protocol as above\nvar socket = net.connect(9999, 'localhost');\n\nsocket.pipe(client.stream).pipe(socket);\n\nclient.echo('test', function(err, value) {\n\tconsole.log(value); // prints echo: test\n});\n```\n\nOptionally you can use pass the stream to protocol to setup the pipe chain for you\n\n``` js\nvar socket = net.connect(9999, 'localhost');\nvar client = protocol(socket);\n\nclient.echo(...);\n```\n\n## Command syntax\n\nSimilary to the above example the command syntax is always\n\n\tcommand argument1 argument2 ... > response\n\nIf the command does not have a response just do\n\n\tcommand argument1 arguments2\n\nIf a series of arguments should the passed as an array add `...` to the syntax\n\n\tcommand test args... > response\n\nSimilary if your response is an array\n\n\tcommand test args... > response...\n\nSome examples of this could be\n\n``` js\nvar protocol = hprotocol()\n\t.use('hello')\n\t.use('add numbers... > number')\n\t.use('reverse values... > values...')\n\nvar client = protocol();\n\nclient.on('hello', function() {\n\t// no response for this since no > in the spec\n\tconsole.log('hello world');\n});\n\nclient.on('add', function(numbers, callback) {\n\tnumbers = numbers.map(Number); // convert to numbers\n\tvar sum = numbers.reduce(function(a, b) {\n\t\treturn a+b;\n\t}, 0);\n\tcallback(null, sum); // return a single value\n});\n\nclient.on('reverse', function(values, callback) {\n\tcallback(null, values.reverse());\n});\n\n// setup a pipe chain\nsocket.pipe(client.stream).pipe(socket);\n```\n\nIf the above socket was listening on port 9999 we could do\n\n\techo 'add 1 2 3 4' | nc localhost 9999\n\t# prints > 10\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/hprotocol/issues"
  },
  "homepage": "https://github.com/mafintosh/hprotocol",
  "_id": "hprotocol@0.5.0",
  "_from": "hprotocol@"
}
